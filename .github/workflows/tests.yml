# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12", "3.13"]
        env: [{ MINIMAL: "true" }, { MINIMAL: "false" }]
        include:
        # custom python versions
        - os: ubuntu-20.04
          python-version: 3.8
        - os: macos-13
          python-version: 3.8
        - os: macos-latest
          python-version: "3.12"
        - os: windows-latest
          python-version: "3.11"
        - os: windows-latest
          python-version: "3.13"
    steps:
    # Python and pip setup
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # package setup
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: python -m pip install --upgrade -e ".[dev]"

    # tests
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Code format and type checking
      if: ${{ matrix.python-version == '3.13' }}
      run: |
        black --check --diff htmldate
        mypy -p htmldate

    - name: Install full dependencies
      if: ${{ matrix.env.MINIMAL == 'false'}}
      run: python -m pip install -e ".[all]"

    - name: Test with pytest
      run: |
        python -m pytest --cov=./ --cov-report=xml

    # coverage
    - name: Upload coverage to Codecov
      if: ${{ matrix.env.MINIMAL == 'false' && matrix.python-version == '3.11' }}
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        fail_ci_if_error: true
        files: ./coverage.xml
        verbose: true
